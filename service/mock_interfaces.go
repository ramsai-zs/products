// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service is a generated GoMock package.
package service

import (
	models "products/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockProducts is a mock of Products interface.
type MockProducts struct {
	ctrl     *gomock.Controller
	recorder *MockProductsMockRecorder
}

// MockProductsMockRecorder is the mock recorder for MockProducts.
type MockProductsMockRecorder struct {
	mock *MockProducts
}

// NewMockProducts creates a new mock instance.
func NewMockProducts(ctrl *gomock.Controller) *MockProducts {
	mock := &MockProducts{ctrl: ctrl}
	mock.recorder = &MockProductsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducts) EXPECT() *MockProductsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProducts) Create(ctx *gofr.Context, product models.Product) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, product)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductsMockRecorder) Create(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProducts)(nil).Create), ctx, product)
}

// GetAll mocks base method.
func (m *MockProducts) GetAll(ctx *gofr.Context, params map[string]string) ([]models.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, params)
	ret0, _ := ret[0].([]models.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductsMockRecorder) GetAll(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProducts)(nil).GetAll), ctx, params)
}

// GetByID mocks base method.
func (m *MockProducts) GetByID(ctx *gofr.Context, id int) (models.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductsMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProducts)(nil).GetByID), ctx, id)
}

// MockVariants is a mock of Variants interface.
type MockVariants struct {
	ctrl     *gomock.Controller
	recorder *MockVariantsMockRecorder
}

// MockVariantsMockRecorder is the mock recorder for MockVariants.
type MockVariantsMockRecorder struct {
	mock *MockVariants
}

// NewMockVariants creates a new mock instance.
func NewMockVariants(ctrl *gomock.Controller) *MockVariants {
	mock := &MockVariants{ctrl: ctrl}
	mock.recorder = &MockVariantsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariants) EXPECT() *MockVariantsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVariants) Create(ctx *gofr.Context, variant models.Variant) (models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, variant)
	ret0, _ := ret[0].(models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVariantsMockRecorder) Create(ctx, variant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVariants)(nil).Create), ctx, variant)
}

// GetByIdAndProductId mocks base method.
func (m *MockVariants) GetByIdAndProductId(ctx *gofr.Context, variantId, productId int) (models.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdAndProductId", ctx, variantId, productId)
	ret0, _ := ret[0].(models.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdAndProductId indicates an expected call of GetByIdAndProductId.
func (mr *MockVariantsMockRecorder) GetByIdAndProductId(ctx, variantId, productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdAndProductId", reflect.TypeOf((*MockVariants)(nil).GetByIdAndProductId), ctx, variantId, productId)
}
